
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 04 16:10:37 GMT-03:00 2015
//----------------------------------------------------

package org.parser;

import java.util.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 04 16:10:37 GMT-03:00 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\023\000\002\024\010" +
    "\000\002\024\012\000\002\025\002\000\002\025\004\000" +
    "\002\006\002\000\002\006\004\000\002\005\015\000\002" +
    "\007\006\000\002\007\011\000\002\007\007\000\002\007" +
    "\011\000\002\007\007\000\002\007\005\000\002\013\003" +
    "\000\002\010\003\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\004\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\006\000\002\010\003" +
    "\000\002\010\003\000\002\010\007\000\002\010\006\000" +
    "\002\010\003\000\002\012\005\000\002\011\006\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\005\000\002\015\005\000\002\016\002\000\002\016\004" +
    "\000\002\017\004\000\002\021\004\000\002\021\005\000" +
    "\002\020\005\000\002\020\003\000\002\022\004\000\002" +
    "\022\005\000\002\023\003\000\002\023\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\004\013\006\001\002\000\004\002\223\001" +
    "\002\000\006\002\ufffa\013\146\001\002\000\004\047\007" +
    "\001\002\000\024\014\uffef\034\uffef\037\uffef\040\uffef\042" +
    "\uffef\043\uffef\044\uffef\046\uffef\047\uffef\001\002\000\004" +
    "\044\011\001\002\000\004\015\012\001\002\000\004\016" +
    "\013\001\002\000\004\017\014\001\002\000\004\020\015" +
    "\001\002\000\004\042\016\001\002\000\004\006\017\001" +
    "\002\000\004\040\020\001\002\000\004\041\021\001\002" +
    "\000\004\047\007\001\002\000\004\043\023\001\002\000" +
    "\004\044\024\001\002\000\014\007\031\011\030\026\027" +
    "\044\025\047\007\001\002\000\016\007\031\011\030\026" +
    "\027\044\025\045\ufffe\047\007\001\002\000\004\045\136" +
    "\001\002\000\004\042\132\001\002\000\004\042\126\001" +
    "\002\000\004\042\120\001\002\000\006\034\033\040\034" +
    "\001\002\000\022\021\036\022\040\023\041\025\035\035" +
    "\043\042\046\047\042\050\047\001\002\000\022\021\036" +
    "\022\040\023\041\025\035\035\043\042\046\047\042\050" +
    "\047\001\002\000\006\005\107\047\007\001\002\000\030" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\043\uffe6\046\uffe6\001\002\000\022" +
    "\027\054\030\055\031\056\032\053\033\051\036\060\040" +
    "\057\041\103\001\002\000\030\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\043" +
    "\uffe5\046\uffe5\001\002\000\030\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\043" +
    "\uffe4\046\uffe4\001\002\000\030\027\uffee\030\uffee\031\uffee" +
    "\032\uffee\033\uffee\036\uffee\037\uffee\040\uffee\041\uffee\043" +
    "\uffee\046\uffee\001\002\000\022\021\036\022\040\023\041" +
    "\025\035\035\043\042\046\047\042\050\047\001\002\000" +
    "\030\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\036\uffe2" +
    "\037\uffe2\040\uffe2\041\uffe2\043\uffe2\046\uffe2\001\002\000" +
    "\030\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\043\uffe1\046\uffe1\001\002\000" +
    "\022\021\036\022\040\023\041\025\035\035\043\042\046" +
    "\047\042\050\047\001\002\000\030\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\043\uffde\046\uffde\001\002\000\022\027\054\030\055\031" +
    "\056\032\053\033\051\036\060\040\057\043\052\001\002" +
    "\000\022\021\036\022\040\023\041\025\035\035\043\042" +
    "\046\047\042\050\047\001\002\000\030\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\036\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\043\uffe8\046\uffe8\001\002\000\022\021\036\022\040" +
    "\023\041\025\035\035\043\042\046\047\042\050\047\001" +
    "\002\000\022\021\036\022\040\023\041\025\035\035\043" +
    "\042\046\047\042\050\047\001\002\000\022\021\036\022" +
    "\040\023\041\025\035\035\043\042\046\047\042\050\047" +
    "\001\002\000\022\021\036\022\040\023\041\025\035\035" +
    "\043\042\046\047\042\050\047\001\002\000\022\021\036" +
    "\022\040\023\041\025\035\035\043\042\046\047\042\050" +
    "\047\001\002\000\006\024\061\047\007\001\002\000\030" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\043\uffdd\046\uffdd\001\002\000\004" +
    "\042\063\001\002\000\024\021\036\022\040\023\041\025" +
    "\035\035\043\042\046\043\067\047\042\050\047\001\002" +
    "\000\030\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\043\uffdf\046\uffdf\001\002" +
    "\000\004\043\072\001\002\000\024\027\054\030\055\031" +
    "\056\032\053\033\051\036\060\037\070\040\057\043\uffcd" +
    "\001\002\000\030\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\043\uffcf\046\uffcf" +
    "\001\002\000\022\021\036\022\040\023\041\025\035\035" +
    "\043\042\046\047\042\050\047\001\002\000\004\043\uffcc" +
    "\001\002\000\030\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\036\uffce\037\uffce\040\uffce\041\uffce\043\uffce\046\uffce" +
    "\001\002\000\022\027\054\030\055\031\056\032\053\033" +
    "\051\036\060\040\057\041\074\001\002\000\030\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\043\uffdc\046\uffdc\001\002\000\030\027\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\033\uffeb\036\060\037\uffeb\040" +
    "\uffeb\041\uffeb\043\uffeb\046\uffeb\001\002\000\030\027\uffec" +
    "\030\uffec\031\056\032\uffec\033\uffec\036\060\037\uffec\040" +
    "\uffec\041\uffec\043\uffec\046\uffec\001\002\000\030\027\uffed" +
    "\030\uffed\031\056\032\uffed\033\uffed\036\060\037\uffed\040" +
    "\uffed\041\uffed\043\uffed\046\uffed\001\002\000\026\027\054" +
    "\030\055\031\056\033\051\036\060\037\uffe9\040\uffe9\041" +
    "\uffe9\043\uffe9\046\uffe9\001\002\000\030\027\054\030\055" +
    "\031\056\032\uffea\033\uffea\036\060\037\uffea\040\uffea\041" +
    "\uffea\043\uffea\046\uffea\001\002\000\030\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\036\060\037\uffe7\040\uffe7\041" +
    "\uffe7\043\uffe7\046\uffe7\001\002\000\004\034\104\001\002" +
    "\000\022\021\036\022\040\023\041\025\035\035\043\042" +
    "\046\047\042\050\047\001\002\000\022\027\054\030\055" +
    "\031\056\032\053\033\051\036\060\040\057\046\106\001" +
    "\002\000\022\007\ufff2\010\ufff2\011\ufff2\012\ufff2\026\ufff2" +
    "\044\ufff2\045\ufff2\047\ufff2\001\002\000\004\040\113\001" +
    "\002\000\004\042\111\001\002\000\004\043\112\001\002" +
    "\000\030\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\043\uffe3\046\uffe3\001\002" +
    "\000\022\021\036\022\040\023\041\025\035\035\043\042" +
    "\046\047\042\050\047\001\002\000\022\027\054\030\055" +
    "\031\056\032\053\033\051\036\060\040\057\041\115\001" +
    "\002\000\030\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\043\uffe0\046\uffe0\001" +
    "\002\000\022\027\054\030\055\031\056\032\053\033\051" +
    "\036\060\040\057\046\117\001\002\000\022\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\026\ufff5\044\ufff5\045\ufff5\047\ufff5" +
    "\001\002\000\022\021\036\022\040\023\041\025\035\035" +
    "\043\042\046\047\042\050\047\001\002\000\022\027\054" +
    "\030\055\031\056\032\053\033\051\036\060\040\057\043" +
    "\122\001\002\000\014\007\031\011\030\026\027\044\025" +
    "\047\007\001\002\000\004\010\124\001\002\000\014\007" +
    "\031\011\030\026\027\044\025\047\007\001\002\000\022" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\026\ufff4\044\ufff4\045" +
    "\ufff4\047\ufff4\001\002\000\022\021\036\022\040\023\041" +
    "\025\035\035\043\042\046\047\042\050\047\001\002\000" +
    "\022\027\054\030\055\031\056\032\053\033\051\036\060" +
    "\040\057\043\130\001\002\000\014\007\031\011\030\026" +
    "\027\044\025\047\007\001\002\000\022\007\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\026\ufff1\044\ufff1\045\ufff1\047\ufff1\001" +
    "\002\000\022\021\036\022\040\023\041\025\035\035\043" +
    "\042\046\047\042\050\047\001\002\000\022\027\054\030" +
    "\055\031\056\032\053\033\051\036\060\040\057\043\134" +
    "\001\002\000\004\046\135\001\002\000\022\007\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\026\ufff3\044\ufff3\045\ufff3\047\ufff3" +
    "\001\002\000\004\045\137\001\002\000\006\002\ufffd\013" +
    "\ufffd\001\002\000\020\007\031\011\030\012\ufffe\026\027" +
    "\044\025\045\ufffe\047\007\001\002\000\004\045\142\001" +
    "\002\000\022\007\ufff0\010\ufff0\011\ufff0\012\ufff0\026\ufff0" +
    "\044\ufff0\045\ufff0\047\ufff0\001\002\000\006\012\uffff\045" +
    "\uffff\001\002\000\004\002\001\001\002\000\006\002\ufffa" +
    "\013\146\001\002\000\004\047\007\001\002\000\006\014" +
    "\151\044\150\001\002\000\014\004\uffd6\005\uffd6\015\uffd6" +
    "\045\uffd6\047\uffd6\001\002\000\004\047\007\001\002\000" +
    "\004\044\153\001\002\000\014\004\uffd6\005\uffd6\015\uffd6" +
    "\045\uffd6\047\uffd6\001\002\000\014\004\156\005\163\015" +
    "\157\045\ufff8\047\007\001\002\000\004\047\007\001\002" +
    "\000\004\047\uffda\001\002\000\010\004\156\005\163\047" +
    "\007\001\002\000\006\015\157\045\ufff8\001\002\000\026" +
    "\004\uffd5\005\uffd5\007\uffd5\011\uffd5\012\uffd5\015\uffd5\026" +
    "\uffd5\044\uffd5\045\uffd5\047\uffd5\001\002\000\004\047\uffd9" +
    "\001\002\000\006\040\166\047\uffdb\001\002\000\004\045" +
    "\165\001\002\000\006\002\ufffb\013\ufffb\001\002\000\004" +
    "\041\167\001\002\000\004\047\uffd8\001\002\000\004\045" +
    "\ufff7\001\002\000\004\047\007\001\002\000\004\042\174" +
    "\001\002\000\004\044\205\001\002\000\012\004\156\005" +
    "\163\043\175\047\007\001\002\000\004\044\uffd3\001\002" +
    "\000\004\043\204\001\002\000\004\047\007\001\002\000" +
    "\006\037\201\043\uffd0\001\002\000\010\004\156\005\163" +
    "\047\007\001\002\000\004\043\uffd1\001\002\000\006\037" +
    "\uffd4\043\uffd4\001\002\000\004\044\uffd2\001\002\000\022" +
    "\004\uffd6\005\uffd6\007\uffd6\011\uffd6\012\uffd6\026\uffd6\044" +
    "\uffd6\047\uffd6\001\002\000\022\004\156\005\163\007\031" +
    "\011\030\012\ufffe\026\027\044\025\047\007\001\002\000" +
    "\004\012\211\001\002\000\010\034\033\040\034\047\uffd9" +
    "\001\002\000\022\021\036\022\040\023\041\025\035\035" +
    "\043\042\046\047\042\050\047\001\002\000\022\027\054" +
    "\030\055\031\056\032\053\033\051\036\060\040\057\046" +
    "\213\001\002\000\004\045\214\001\002\000\006\015\ufff6" +
    "\045\ufff6\001\002\000\004\046\216\001\002\000\026\004" +
    "\uffd7\005\uffd7\007\uffd7\011\uffd7\012\uffd7\015\uffd7\026\uffd7" +
    "\044\uffd7\045\uffd7\047\uffd7\001\002\000\014\004\156\005" +
    "\163\015\157\045\ufff8\047\007\001\002\000\004\045\221" +
    "\001\002\000\006\002\ufffc\013\ufffc\001\002\000\004\002" +
    "\ufff9\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\006\024\144\025\143\001\001\000\004\013\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\025\013\031\001\001\000" +
    "\010\003\140\007\137\013\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\115\011\044\012\043\001\001" +
    "\000\010\010\036\011\044\012\043\001\001\000\004\013" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\101\011\044\012\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\047\011\044\012\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\100\011\044" +
    "\012\043\001\001\000\002\001\001\000\010\010\077\011" +
    "\044\012\043\001\001\000\010\010\076\011\044\012\043" +
    "\001\001\000\010\010\075\011\044\012\043\001\001\000" +
    "\010\010\074\011\044\012\043\001\001\000\010\010\072" +
    "\011\044\012\043\001\001\000\004\013\061\001\001\000" +
    "\002\001\001\000\004\022\063\001\001\000\012\010\065" +
    "\011\044\012\043\023\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\065\011\044\012\043\023\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\104\011\044\012\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\113\011\044\012\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\120\011\044\012\043\001\001\000\002\001\001\000\006" +
    "\007\122\013\031\001\001\000\002\001\001\000\006\007" +
    "\124\013\031\001\001\000\002\001\001\000\010\010\126" +
    "\011\044\012\043\001\001\000\002\001\001\000\006\007" +
    "\130\013\031\001\001\000\002\001\001\000\010\010\132" +
    "\011\044\012\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\142\007\137\013\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\144\025\221\001\001\000\004\013\146\001" +
    "\001\000\002\001\001\000\004\016\216\001\001\000\004" +
    "\013\151\001\001\000\002\001\001\000\004\016\153\001" +
    "\001\000\014\005\157\006\163\013\161\014\154\015\160" +
    "\001\001\000\004\013\214\001\001\000\002\001\001\000" +
    "\006\013\161\014\170\001\001\000\006\005\157\006\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\171\001" +
    "\001\000\004\021\172\001\001\000\002\001\001\000\012" +
    "\013\161\014\176\017\177\020\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\202\001\001\000\002" +
    "\001\001\000\012\013\161\014\176\017\177\020\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\205\001\001\000\014\003\206\007\137\013" +
    "\207\014\154\015\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\211\011\044\012\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\157\006\217\013" +
    "\161\014\154\015\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$myparser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$myparser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$myparser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$myparser$actions {
  private final myparser parser;

  /** Constructor */
  CUP$myparser$actions(myparser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$myparser$do_action(
    int                        CUP$myparser$act_num,
    java_cup.runtime.lr_parser CUP$myparser$parser,
    java.util.Stack            CUP$myparser$stack,
    int                        CUP$myparser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$myparser$result;

      /* select the action based on the action number */
      switch (CUP$myparser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpressionList ::= Expression COMMA ExpressionList 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		ExpList l = (ExpList)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = l; RESULT.addElement(e); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("ExpressionList",17, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpressionList ::= Expression 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new ExpList(eleft); RESULT.addElement(e); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("ExpressionList",17, ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MethodInvocationParameterList ::= LPAREN ExpressionList RPAREN 
            {
              ExpList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		ExpList e = (ExpList)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		 RESULT = e; 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("MethodInvocationParameterList",16, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MethodInvocationParameterList ::= LPAREN RPAREN 
            {
              ExpList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		 RESULT = new ExpList(lleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("MethodInvocationParameterList",16, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormalParameterList ::= FormalParameter 
            {
              FormalList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		Formal p = (Formal)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new FormalList(pleft); RESULT.addElement(p); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",14, ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FormalParameterList ::= FormalParameter COMMA FormalParameterList 
            {
              FormalList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).right;
		Formal p = (Formal)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		FormalList l = (FormalList)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = l; l.addElement(p); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",14, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FormalParameterListAndParens ::= LPAREN FormalParameterList RPAREN 
            {
              FormalList RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		FormalList params = (FormalList)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		 RESULT = params; 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("FormalParameterListAndParens",15, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FormalParameterListAndParens ::= LPAREN RPAREN 
            {
              FormalList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		 RESULT = new FormalList(lleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("FormalParameterListAndParens",15, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FormalParameter ::= Type Identifier 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new Formal(t, i, tleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("FormalParameter",13, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VarDeclarationList ::= VarDeclarationList VarDeclaration 
            {
              VarDeclList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		VarDeclList l = (VarDeclList)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		VarDecl e = (VarDecl)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = l; l.addElement(e); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList",12, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VarDeclarationList ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = new VarDeclList(0); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList",12, ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VarDeclaration ::= Type Identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		 RESULT = new VarDecl(t, i, tleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",11, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Type ::= INTEGER_TYPE LBRACKET RBRACKET 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-2)).value;
		 RESULT = new IntArrayType(ileft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Type ::= Identifier 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new IdentifierType(i.s, ileft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Type ::= BOOLEAN_TYPE 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new BooleanType(bleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Type ::= INTEGER_TYPE 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new IntegerType(ileft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ArrayLookup ::= Expression LBRACKET Expression RBRACKET 
            {
              ArrayLookup RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		 RESULT = new ArrayLookup(e, i, eleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("ArrayLookup",7, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-3)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ArrayLength ::= Expression DOT LENGTH 
            {
              ArrayLength RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-2)).value;
		 RESULT = new ArrayLength(e, eleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("ArrayLength",8, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= INTEGER_LITERAL 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new IntegerLiteral(i.intValue(), ileft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expression ::= Expression DOT Identifier MethodInvocationParameterList 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		ExpList l = (ExpList)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new Call(e, id, l, eleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-3)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= NEW INTEGER_TYPE LBRACKET Expression RBRACKET 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		 RESULT = new NewArray(e, nleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-4)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expression ::= ArrayLookup 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		ArrayLookup l = (ArrayLookup)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = l; 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expression ::= ArrayLength 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		ArrayLength l = (ArrayLength)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = l; 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expression ::= NEW Identifier LPAREN RPAREN 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-2)).value;
		 RESULT = new NewObject(i, nleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-3)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expression ::= THIS 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new This(tleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expression ::= FALSE 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new False(fleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expression ::= TRUE 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new True(tleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expression ::= NOT Expression 
            {
              Exp RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new Not(expr, notleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expression ::= LPAREN Expression RPAREN 
            {
              Exp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		 RESULT = expr; 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expression ::= Expression AND Expression 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new And(arg1, arg2, arg1left); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expression ::= Expression LT Expression 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new LessThan(arg1, arg2, arg1left); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expression ::= Expression TIMES Expression 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new Times(arg1, arg2, arg1left); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expression ::= Expression MINUS Expression 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new Minus(arg1, arg2, arg1left); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expression ::= Expression PLUS Expression 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new Plus(arg1, arg2, arg1left); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expression ::= IDENTIFIER 
            {
              Exp RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new IdentifierExp(name, nameleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new Identifier(id, idleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Identifier",9, ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Statement ::= LBRACE StatementList RBRACE 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		 RESULT = new Block(s, sleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= WHILE LPAREN Expression RPAREN Statement 
            {
              Statement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).right;
		Exp cond = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new While(cond, s, wleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-4)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-6)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		 RESULT = new ArrayAssign(id, e, v, idleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-6)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= SYSTEM_OUT_PRINTLN LPAREN Expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-2)).value;
		 RESULT = new Print(e, sleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-4)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= IF LPAREN Expression RPAREN Statement ELSE Statement 
            {
              Statement RESULT =null;
		int ifKeywordleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-6)).left;
		int ifKeywordright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-6)).right;
		Object ifKeyword = (Object)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-4)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-4)).value;
		int thenStmtleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).left;
		int thenStmtright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).right;
		Statement thenStmt = (Statement)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-2)).value;
		int elseStmtleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int elseStmtright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		Statement elseStmt = (Statement)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new If(expr, thenStmt, elseStmt, ifKeywordleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-6)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= Identifier BECOMES Expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		 RESULT = new Assign(id, expr, idleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-3)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MethodDecl ::= PUBLIC Type Identifier FormalParameterListAndParens LBRACE VarDeclarationList StatementList RETURN Expression SEMICOLON RBRACE 
            {
              MethodDecl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-10)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-10)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-10)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-9)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-8)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-7)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-7)).right;
		FormalList params = (FormalList)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-7)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-5)).right;
		VarDeclList vars = (VarDeclList)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-5)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-4)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-4)).right;
		StatementList stmts = (StatementList)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-4)).value;
		int rvleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).right;
		Exp rv = (Exp)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-2)).value;
		 RESULT = new MethodDecl(t, i, params, vars, stmts, rv, pleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("MethodDecl",3, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-10)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MethodDeclList ::= MethodDecl MethodDeclList 
            {
              MethodDeclList RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		MethodDecl m = (MethodDecl)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		MethodDeclList l = (MethodDeclList)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = l; l.addElement(m); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",4, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MethodDeclList ::= 
            {
              MethodDeclList RESULT =null;
		 RESULT = new MethodDeclList(0); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",4, ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ClassDeclList ::= ClassDecl ClassDeclList 
            {
              ClassDeclList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		ClassDecl c = (ClassDecl)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		ClassDeclList l = (ClassDeclList)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = l; l.addElement(c); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("ClassDeclList",19, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassDeclList ::= 
            {
              ClassDeclList RESULT =null;
		 RESULT = new ClassDeclList(0); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("ClassDeclList",19, ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassDecl ::= CLASS Identifier EXTENDS Identifier LBRACE VarDeclarationList MethodDeclList RBRACE 
            {
              ClassDecl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-6)).value;
		int parentleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-4)).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-4)).right;
		Identifier parent = (Identifier)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		MethodDeclList m = (MethodDeclList)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		 RESULT = new ClassDeclExtends(i, parent, v, m, ileft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("ClassDecl",18, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-7)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassDecl ::= CLASS Identifier LBRACE VarDeclarationList MethodDeclList RBRACE 
            {
              ClassDecl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		MethodDeclList m = (MethodDeclList)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		 RESULT = new ClassDeclSimple(i, v, m, ileft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("ClassDecl",18, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-5)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LBRACE Statement RBRACE RBRACE 
            {
              MainClass RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-16)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-16)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-16)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-15)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-15)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-15)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-5)).right;
		Identifier args = (Identifier)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-5)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-2)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-2)).value;
		 RESULT = new MainClass(id, args, stmt, cleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("MainClass",2, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-16)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // StatementList ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(0); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("StatementList",1, ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // StatementList ::= Statement StatementList 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		StatementList l = (StatementList)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = l; l.addElement(s); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("StatementList",1, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		RESULT = start_val;
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$myparser$parser.done_parsing();
          return CUP$myparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MainClass ClassDeclList 
            {
              Program RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$myparser$stack.elementAt(CUP$myparser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()).right;
		ClassDeclList c = (ClassDeclList)((java_cup.runtime.Symbol) CUP$myparser$stack.peek()).value;
		 RESULT = new Program(m, c, mleft); 
              CUP$myparser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$myparser$stack.elementAt(CUP$myparser$top-1)), ((java_cup.runtime.Symbol)CUP$myparser$stack.peek()), RESULT);
            }
          return CUP$myparser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

